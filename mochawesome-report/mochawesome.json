{
  "stats": {
    "suites": 4,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-29T13:19:30.076Z",
    "end": "2023-08-29T13:19:34.307Z",
    "duration": 4231,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2595c921-eb91-4a8f-b9dc-3a55ab772368",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2d7742ba-cd6e-4588-8620-8b488165d780",
          "title": "Categories",
          "fullFile": "C:\\Users\\Dian_118332\\Documents\\API_Automation\\test\\api-test\\categories.test.js",
          "file": "\\test\\api-test\\categories.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "5. Add categories successfully",
              "fullTitle": "Categories 5. Add categories successfully",
              "timedOut": false,
              "duration": 649,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Add categories\nconst response = await request(request_url)\n  .post(\"/categories\")\n  .set(headers)\n  .send({\n        name: \"snack\",\n        description: \"snack dari unilever\"    \n        })\n       \nassert(response.body).to.include.keys(\"status\",\"message\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.message).to.eql(\"Category berhasil ditambahkan\");",
              "err": {},
              "uuid": "a0745c1a-4c10-4083-8444-81c26067f88a",
              "parentUUID": "2d7742ba-cd6e-4588-8620-8b488165d780",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "6. Get categories list successfully",
              "fullTitle": "Categories 6. Get categories list successfully",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Get categories list\nconst response = await request(request_url)\n  .get(`/categories?q=snack&page=1`)\n  .set(headers)\n       \nassert(response.body).to.include.keys(\"status\");\nassert(response.body.status).to.eql(\"success\");",
              "err": {},
              "uuid": "cd3637c3-69d4-455a-89e7-7129dda8f79c",
              "parentUUID": "2d7742ba-cd6e-4588-8620-8b488165d780",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0745c1a-4c10-4083-8444-81c26067f88a",
            "cd3637c3-69d4-455a-89e7-7129dda8f79c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f327c758-ccca-482c-9e9a-cc6c8530501c",
          "title": "Customer",
          "fullFile": "C:\\Users\\Dian_118332\\Documents\\API_Automation\\test\\api-test\\customer.test.js",
          "file": "\\test\\api-test\\customer.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "7. Add customer successfully",
              "fullTitle": "Customer 7. Add customer successfully",
              "timedOut": false,
              "duration": 489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Add categories\nconst response = await request(request_url)\n  .post(\"/customers\")\n  .set(headers)\n  .send({\n    name: \"Melati\",\n    phone: \"081234567890\",\n    address: \"Jatinegara\",\n    description: \"customer royal\"\n        })\n       \nassert(response.body).to.include.keys(\"status\",\"message\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.message).to.eql(\"Customer berhasil ditambahkan\");",
              "err": {},
              "uuid": "3a9552c1-fe47-42af-a381-f6d4415e5062",
              "parentUUID": "f327c758-ccca-482c-9e9a-cc6c8530501c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "8. Get customer detail",
              "fullTitle": "Customer 8. Get customer detail",
              "timedOut": false,
              "duration": 481,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Get customer detail\nconst response = await request(request_url)\n  .get(`/customers/fa5e57a5-523d-477f-9808-a866fccc48c2`)\n  .set(headers)\n       \nassert(response.body).to.include.keys(\"status\",\"data\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.data.customer.name).to.eql(\"Melati\");",
              "err": {},
              "uuid": "4e233a3a-1d96-4320-bdf8-a1ad59617f69",
              "parentUUID": "f327c758-ccca-482c-9e9a-cc6c8530501c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a9552c1-fe47-42af-a381-f6d4415e5062",
            "4e233a3a-1d96-4320-bdf8-a1ad59617f69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 970,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cdb60712-3dc5-4e4b-b746-af8a3cef8aff",
          "title": "Unit",
          "fullFile": "C:\\Users\\Dian_118332\\Documents\\API_Automation\\test\\api-test\\unit.test.js",
          "file": "\\test\\api-test\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3. Add unit successfully",
              "fullTitle": "Unit 3. Add unit successfully",
              "timedOut": false,
              "duration": 441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Add unit\nconst response = await request(request_url)\n  .post(\"/units\")\n  .set(headers)\n  .send({\n    name: \"gram\",\n    description: \"weight measurement\"\n })\n       \nassert(response.body).to.include.keys(\"status\",\"message\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.message).to.eql(\"Unit berhasil ditambahkan\");",
              "err": {},
              "uuid": "d1fdaf6d-180c-4cba-b2e7-aa36e7ec1772",
              "parentUUID": "cdb60712-3dc5-4e4b-b746-af8a3cef8aff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4. Get unit detail successfully",
              "fullTitle": "Unit 4. Get unit detail successfully",
              "timedOut": false,
              "duration": 447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Get unit detail\nconst response = await request(request_url)\n  .get(`/units/3efb27e2-2e21-4cb9-b651-a90e4c9dff60`)\n  .set(headers)\n       \nassert(response.body).to.include.keys(\"status\",\"data\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.data.unit.name).to.eql(\"gram\");",
              "err": {},
              "uuid": "50f83858-03bb-478f-bbc6-82b9273e5405",
              "parentUUID": "cdb60712-3dc5-4e4b-b746-af8a3cef8aff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1fdaf6d-180c-4cba-b2e7-aa36e7ec1772",
            "50f83858-03bb-478f-bbc6-82b9273e5405"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 888,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7ab9090d-e1b1-4326-89b0-74c5bdf09138",
          "title": "User",
          "fullFile": "C:\\Users\\Dian_118332\\Documents\\API_Automation\\test\\api-test\\user.test.js",
          "file": "\\test\\api-test\\user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Create user successfully",
              "fullTitle": "User 1. Create user successfully",
              "timedOut": false,
              "duration": 759,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Creating new user\nconst response = await request(request_url)\n  .post(\"/users\")\n  .set(headers)\n  .send({\n    name: \"kasir-serbaguna2\",\n    email: \"user2@example.com\",\n    password: \"123\"\n        })\n       \nassert(response.body).to.include.keys(\"status\",\"message\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.message).to.eql(\"User berhasil ditambahkan\");",
              "err": {},
              "uuid": "64975bd3-a0e8-4884-a427-f05845061e21",
              "parentUUID": "7ab9090d-e1b1-4326-89b0-74c5bdf09138",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Get user detail successfully",
              "fullTitle": "User 2. Get user detail successfully",
              "timedOut": false,
              "duration": 477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(request_url);\nconst { data: { accessToken } } = await loginPage.login();\nconst headers = { Authorization: `Bearer ${accessToken}` };\n\n// Get user detail\nconst response = await request(request_url)\n  .get(`/users/9a1236dd-ecbe-4c14-bcd2-60c202398c86`)\n  .set(headers)\n       \nassert(response.body).to.include.keys(\"status\",\"data\");\nassert(response.body.status).to.eql(\"success\");\nassert(response.body.data.user.name).to.eql(\"kasir-serbaguna2\");",
              "err": {},
              "uuid": "8159a42b-c1c1-44ea-a654-93600ad8082a",
              "parentUUID": "7ab9090d-e1b1-4326-89b0-74c5bdf09138",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64975bd3-a0e8-4884-a427-f05845061e21",
            "8159a42b-c1c1-44ea-a654-93600ad8082a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}